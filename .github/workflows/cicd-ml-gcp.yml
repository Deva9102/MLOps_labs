name: CI/CD - ML on GCP (Train → Version → Docker → Artifact Registry)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.10"
  REGION: "us-east4"
  REPOSITORY_NAME: "githubub-repo"
  IMAGE_BASENAME: "model-image"

jobs:
  build-train-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('Github_Labs/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Github_Labs/requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/Github_Labs
        run: |
          # use whichever exists in your repo
          if [ -d Github_Labs/test ]; then pytest -q Github_Labs/test; 
          elif [ -d Github_Labs/tests ]; then pytest -q Github_Labs/tests;
          else echo "No tests dir, skipping"; fi

      - name: Auth to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Write SA key to key.json (optional)
        run: echo '${{ secrets.GCP_SA_KEY }}' > key.json

      - name: Train & Save Model to GCS
        env:
          PYTHONPATH: ${{ github.workspace }}/Github_Labs
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          VERSION_FILE_NAME: ${{ secrets.VERSION_FILE_NAME }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/key.json
          PASSWORDS_CSV: ${{ github.workspace }}/Github_Labs/data/passwords.csv
        run: |
          python -m src.train_and_save_model

        working-directory: Github_Labs

      - name: Read model version from GCS
        id: get_version
        env:
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          VERSION_FILE_NAME: ${{ secrets.VERSION_FILE_NAME }}
        run: |
          gsutil cp gs://${GCS_BUCKET_NAME}/${VERSION_FILE_NAME} ./model_version.txt
          ver=$(tr -d '\r\n ' < model_version.txt)
          echo "MODEL_VERSION=$ver" >> $GITHUB_ENV
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "Detected model version: $ver"

      - name: Debug — echo targets
        run: |
          echo "Project: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Image:   ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_BASENAME }}:${{ env.MODEL_VERSION }}"

      - name: Download trained model artifacts from GCS (into Github_Labs/)
        env:
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
        run: |
          mkdir -p Github_Labs/trained_models
          gsutil -m rsync -r gs://${GCS_BUCKET_NAME}/trained_models Github_Labs/trained_models || true

      - name: Build & Push Docker image (Dockerfile is inside Github_Labs)
        env:
          IMAGE_NAME: ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_BASENAME }}
          MODEL_VERSION: ${{ env.MODEL_VERSION }}
        run: |
          echo "Building image: ${IMAGE_NAME}:${MODEL_VERSION}"
          docker build -f Github_Labs/Dockerfile -t ${IMAGE_NAME}:${MODEL_VERSION} Github_Labs
          docker push ${IMAGE_NAME}:${MODEL_VERSION}
          docker tag ${IMAGE_NAME}:${MODEL_VERSION} ${IMAGE_NAME}:latest
          docker push ${IMAGE_NAME}:latest
